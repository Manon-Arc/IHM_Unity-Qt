// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: com.proto

#include "com.pb.h"
#include "com.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* GrpcService_method_names[] = {
  "/GrpcService/MoveTrans",
  "/GrpcService/MoveRota",
  "/GrpcService/InstanceObject",
  "/GrpcService/TongsManageMove",
  "/GrpcService/TongsManageOpening",
  "/GrpcService/MoveCam",
};

std::unique_ptr< GrpcService::Stub> GrpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GrpcService::Stub> stub(new GrpcService::Stub(channel, options));
  return stub;
}

GrpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MoveTrans_(GrpcService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveRota_(GrpcService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstanceObject_(GrpcService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TongsManageMove_(GrpcService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TongsManageOpening_(GrpcService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveCam_(GrpcService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GrpcService::Stub::MoveTrans(::grpc::ClientContext* context, const ::MoveTransRequest& request, ::MoveTransResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MoveTransRequest, ::MoveTransResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveTrans_, context, request, response);
}

void GrpcService::Stub::async::MoveTrans(::grpc::ClientContext* context, const ::MoveTransRequest* request, ::MoveTransResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MoveTransRequest, ::MoveTransResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTrans_, context, request, response, std::move(f));
}

void GrpcService::Stub::async::MoveTrans(::grpc::ClientContext* context, const ::MoveTransRequest* request, ::MoveTransResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTrans_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MoveTransResponse>* GrpcService::Stub::PrepareAsyncMoveTransRaw(::grpc::ClientContext* context, const ::MoveTransRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MoveTransResponse, ::MoveTransRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveTrans_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MoveTransResponse>* GrpcService::Stub::AsyncMoveTransRaw(::grpc::ClientContext* context, const ::MoveTransRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveTransRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GrpcService::Stub::MoveRota(::grpc::ClientContext* context, const ::MoveRotaRequest& request, ::MoveRotaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MoveRotaRequest, ::MoveRotaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveRota_, context, request, response);
}

void GrpcService::Stub::async::MoveRota(::grpc::ClientContext* context, const ::MoveRotaRequest* request, ::MoveRotaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MoveRotaRequest, ::MoveRotaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveRota_, context, request, response, std::move(f));
}

void GrpcService::Stub::async::MoveRota(::grpc::ClientContext* context, const ::MoveRotaRequest* request, ::MoveRotaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveRota_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MoveRotaResponse>* GrpcService::Stub::PrepareAsyncMoveRotaRaw(::grpc::ClientContext* context, const ::MoveRotaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MoveRotaResponse, ::MoveRotaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveRota_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MoveRotaResponse>* GrpcService::Stub::AsyncMoveRotaRaw(::grpc::ClientContext* context, const ::MoveRotaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRotaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GrpcService::Stub::InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::InstanceObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InstanceObjectRequest, ::InstanceObjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstanceObject_, context, request, response);
}

void GrpcService::Stub::async::InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InstanceObjectRequest, ::InstanceObjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstanceObject_, context, request, response, std::move(f));
}

void GrpcService::Stub::async::InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstanceObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>* GrpcService::Stub::PrepareAsyncInstanceObjectRaw(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::InstanceObjectResponse, ::InstanceObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstanceObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>* GrpcService::Stub::AsyncInstanceObjectRaw(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstanceObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GrpcService::Stub::TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::TongsManageMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TongsManageMoveRequest, ::TongsManageMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TongsManageMove_, context, request, response);
}

void GrpcService::Stub::async::TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TongsManageMoveRequest, ::TongsManageMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TongsManageMove_, context, request, response, std::move(f));
}

void GrpcService::Stub::async::TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TongsManageMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>* GrpcService::Stub::PrepareAsyncTongsManageMoveRaw(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TongsManageMoveResponse, ::TongsManageMoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TongsManageMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>* GrpcService::Stub::AsyncTongsManageMoveRaw(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTongsManageMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GrpcService::Stub::TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::TongsManageOpeningResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TongsManageOpeningRequest, ::TongsManageOpeningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TongsManageOpening_, context, request, response);
}

void GrpcService::Stub::async::TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TongsManageOpeningRequest, ::TongsManageOpeningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TongsManageOpening_, context, request, response, std::move(f));
}

void GrpcService::Stub::async::TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TongsManageOpening_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>* GrpcService::Stub::PrepareAsyncTongsManageOpeningRaw(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TongsManageOpeningResponse, ::TongsManageOpeningRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TongsManageOpening_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>* GrpcService::Stub::AsyncTongsManageOpeningRaw(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTongsManageOpeningRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GrpcService::Stub::MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::MoveCamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MoveCamRequest, ::MoveCamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveCam_, context, request, response);
}

void GrpcService::Stub::async::MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MoveCamRequest, ::MoveCamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveCam_, context, request, response, std::move(f));
}

void GrpcService::Stub::async::MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveCam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MoveCamResponse>* GrpcService::Stub::PrepareAsyncMoveCamRaw(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MoveCamResponse, ::MoveCamRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveCam_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MoveCamResponse>* GrpcService::Stub::AsyncMoveCamRaw(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveCamRaw(context, request, cq);
  result->StartCall();
  return result;
}

GrpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::MoveTransRequest, ::MoveTransResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MoveTransRequest* req,
             ::MoveTransResponse* resp) {
               return service->MoveTrans(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::MoveRotaRequest, ::MoveRotaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MoveRotaRequest* req,
             ::MoveRotaResponse* resp) {
               return service->MoveRota(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::InstanceObjectRequest, ::InstanceObjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InstanceObjectRequest* req,
             ::InstanceObjectResponse* resp) {
               return service->InstanceObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::TongsManageMoveRequest, ::TongsManageMoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TongsManageMoveRequest* req,
             ::TongsManageMoveResponse* resp) {
               return service->TongsManageMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::TongsManageOpeningRequest, ::TongsManageOpeningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TongsManageOpeningRequest* req,
             ::TongsManageOpeningResponse* resp) {
               return service->TongsManageOpening(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::MoveCamRequest, ::MoveCamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MoveCamRequest* req,
             ::MoveCamResponse* resp) {
               return service->MoveCam(ctx, req, resp);
             }, this)));
}

GrpcService::Service::~Service() {
}

::grpc::Status GrpcService::Service::MoveTrans(::grpc::ServerContext* context, const ::MoveTransRequest* request, ::MoveTransResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcService::Service::MoveRota(::grpc::ServerContext* context, const ::MoveRotaRequest* request, ::MoveRotaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcService::Service::InstanceObject(::grpc::ServerContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcService::Service::TongsManageMove(::grpc::ServerContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcService::Service::TongsManageOpening(::grpc::ServerContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcService::Service::MoveCam(::grpc::ServerContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


