// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: com.proto
#ifndef GRPC_com_2eproto__INCLUDED
#define GRPC_com_2eproto__INCLUDED

#include "com.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class GrpcService final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status MoveBot(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::MoveBotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveBotResponse>> AsyncMoveBot(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveBotResponse>>(AsyncMoveBotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveBotResponse>> PrepareAsyncMoveBot(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveBotResponse>>(PrepareAsyncMoveBotRaw(context, request, cq));
    }
    virtual ::grpc::Status RotaBot(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::RotaBotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RotaBotResponse>> AsyncRotaBot(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RotaBotResponse>>(AsyncRotaBotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RotaBotResponse>> PrepareAsyncRotaBot(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RotaBotResponse>>(PrepareAsyncRotaBotRaw(context, request, cq));
    }
    virtual ::grpc::Status InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::InstanceObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstanceObjectResponse>> AsyncInstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstanceObjectResponse>>(AsyncInstanceObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstanceObjectResponse>> PrepareAsyncInstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstanceObjectResponse>>(PrepareAsyncInstanceObjectRaw(context, request, cq));
    }
    virtual ::grpc::Status TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::TongsManageMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageMoveResponse>> AsyncTongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageMoveResponse>>(AsyncTongsManageMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageMoveResponse>> PrepareAsyncTongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageMoveResponse>>(PrepareAsyncTongsManageMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::TongsManageOpeningResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageOpeningResponse>> AsyncTongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageOpeningResponse>>(AsyncTongsManageOpeningRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageOpeningResponse>> PrepareAsyncTongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageOpeningResponse>>(PrepareAsyncTongsManageOpeningRaw(context, request, cq));
    }
    virtual ::grpc::Status MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::MoveCamResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveCamResponse>> AsyncMoveCam(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveCamResponse>>(AsyncMoveCamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveCamResponse>> PrepareAsyncMoveCam(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MoveCamResponse>>(PrepareAsyncMoveCamRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void MoveBot(::grpc::ClientContext* context, const ::MoveBotRequest* request, ::MoveBotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveBot(::grpc::ClientContext* context, const ::MoveBotRequest* request, ::MoveBotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RotaBot(::grpc::ClientContext* context, const ::RotaBotRequest* request, ::RotaBotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RotaBot(::grpc::ClientContext* context, const ::RotaBotRequest* request, ::RotaBotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MoveBotResponse>* AsyncMoveBotRaw(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MoveBotResponse>* PrepareAsyncMoveBotRaw(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RotaBotResponse>* AsyncRotaBotRaw(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RotaBotResponse>* PrepareAsyncRotaBotRaw(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InstanceObjectResponse>* AsyncInstanceObjectRaw(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InstanceObjectResponse>* PrepareAsyncInstanceObjectRaw(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageMoveResponse>* AsyncTongsManageMoveRaw(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageMoveResponse>* PrepareAsyncTongsManageMoveRaw(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageOpeningResponse>* AsyncTongsManageOpeningRaw(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TongsManageOpeningResponse>* PrepareAsyncTongsManageOpeningRaw(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MoveCamResponse>* AsyncMoveCamRaw(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MoveCamResponse>* PrepareAsyncMoveCamRaw(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status MoveBot(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::MoveBotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveBotResponse>> AsyncMoveBot(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveBotResponse>>(AsyncMoveBotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveBotResponse>> PrepareAsyncMoveBot(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveBotResponse>>(PrepareAsyncMoveBotRaw(context, request, cq));
    }
    ::grpc::Status RotaBot(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::RotaBotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RotaBotResponse>> AsyncRotaBot(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RotaBotResponse>>(AsyncRotaBotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RotaBotResponse>> PrepareAsyncRotaBot(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RotaBotResponse>>(PrepareAsyncRotaBotRaw(context, request, cq));
    }
    ::grpc::Status InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::InstanceObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>> AsyncInstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>>(AsyncInstanceObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>> PrepareAsyncInstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>>(PrepareAsyncInstanceObjectRaw(context, request, cq));
    }
    ::grpc::Status TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::TongsManageMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>> AsyncTongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>>(AsyncTongsManageMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>> PrepareAsyncTongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>>(PrepareAsyncTongsManageMoveRaw(context, request, cq));
    }
    ::grpc::Status TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::TongsManageOpeningResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>> AsyncTongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>>(AsyncTongsManageOpeningRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>> PrepareAsyncTongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>>(PrepareAsyncTongsManageOpeningRaw(context, request, cq));
    }
    ::grpc::Status MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::MoveCamResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveCamResponse>> AsyncMoveCam(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveCamResponse>>(AsyncMoveCamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveCamResponse>> PrepareAsyncMoveCam(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MoveCamResponse>>(PrepareAsyncMoveCamRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void MoveBot(::grpc::ClientContext* context, const ::MoveBotRequest* request, ::MoveBotResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveBot(::grpc::ClientContext* context, const ::MoveBotRequest* request, ::MoveBotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RotaBot(::grpc::ClientContext* context, const ::RotaBotRequest* request, ::RotaBotResponse* response, std::function<void(::grpc::Status)>) override;
      void RotaBot(::grpc::ClientContext* context, const ::RotaBotRequest* request, ::RotaBotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void InstanceObject(::grpc::ClientContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response, std::function<void(::grpc::Status)>) override;
      void TongsManageMove(::grpc::ClientContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response, std::function<void(::grpc::Status)>) override;
      void TongsManageOpening(::grpc::ClientContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveCam(::grpc::ClientContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MoveBotResponse>* AsyncMoveBotRaw(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MoveBotResponse>* PrepareAsyncMoveBotRaw(::grpc::ClientContext* context, const ::MoveBotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RotaBotResponse>* AsyncRotaBotRaw(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RotaBotResponse>* PrepareAsyncRotaBotRaw(::grpc::ClientContext* context, const ::RotaBotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>* AsyncInstanceObjectRaw(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InstanceObjectResponse>* PrepareAsyncInstanceObjectRaw(::grpc::ClientContext* context, const ::InstanceObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>* AsyncTongsManageMoveRaw(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TongsManageMoveResponse>* PrepareAsyncTongsManageMoveRaw(::grpc::ClientContext* context, const ::TongsManageMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>* AsyncTongsManageOpeningRaw(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TongsManageOpeningResponse>* PrepareAsyncTongsManageOpeningRaw(::grpc::ClientContext* context, const ::TongsManageOpeningRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MoveCamResponse>* AsyncMoveCamRaw(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MoveCamResponse>* PrepareAsyncMoveCamRaw(::grpc::ClientContext* context, const ::MoveCamRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_MoveBot_;
    const ::grpc::internal::RpcMethod rpcmethod_RotaBot_;
    const ::grpc::internal::RpcMethod rpcmethod_InstanceObject_;
    const ::grpc::internal::RpcMethod rpcmethod_TongsManageMove_;
    const ::grpc::internal::RpcMethod rpcmethod_TongsManageOpening_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveCam_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status MoveBot(::grpc::ServerContext* context, const ::MoveBotRequest* request, ::MoveBotResponse* response);
    virtual ::grpc::Status RotaBot(::grpc::ServerContext* context, const ::RotaBotRequest* request, ::RotaBotResponse* response);
    virtual ::grpc::Status InstanceObject(::grpc::ServerContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response);
    virtual ::grpc::Status TongsManageMove(::grpc::ServerContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response);
    virtual ::grpc::Status TongsManageOpening(::grpc::ServerContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response);
    virtual ::grpc::Status MoveCam(::grpc::ServerContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveBot() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MoveBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveBot(::grpc::ServerContext* /*context*/, const ::MoveBotRequest* /*request*/, ::MoveBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveBot(::grpc::ServerContext* context, ::MoveBotRequest* request, ::grpc::ServerAsyncResponseWriter< ::MoveBotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RotaBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RotaBot() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RotaBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotaBot(::grpc::ServerContext* /*context*/, const ::RotaBotRequest* /*request*/, ::RotaBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotaBot(::grpc::ServerContext* context, ::RotaBotRequest* request, ::grpc::ServerAsyncResponseWriter< ::RotaBotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstanceObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstanceObject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InstanceObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceObject(::grpc::ServerContext* /*context*/, const ::InstanceObjectRequest* /*request*/, ::InstanceObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstanceObject(::grpc::ServerContext* context, ::InstanceObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::InstanceObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TongsManageMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TongsManageMove() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TongsManageMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageMove(::grpc::ServerContext* /*context*/, const ::TongsManageMoveRequest* /*request*/, ::TongsManageMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTongsManageMove(::grpc::ServerContext* context, ::TongsManageMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::TongsManageMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TongsManageOpening : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TongsManageOpening() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TongsManageOpening() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageOpening(::grpc::ServerContext* /*context*/, const ::TongsManageOpeningRequest* /*request*/, ::TongsManageOpeningResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTongsManageOpening(::grpc::ServerContext* context, ::TongsManageOpeningRequest* request, ::grpc::ServerAsyncResponseWriter< ::TongsManageOpeningResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveCam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveCam() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_MoveCam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCam(::grpc::ServerContext* /*context*/, const ::MoveCamRequest* /*request*/, ::MoveCamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveCam(::grpc::ServerContext* context, ::MoveCamRequest* request, ::grpc::ServerAsyncResponseWriter< ::MoveCamResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MoveBot<WithAsyncMethod_RotaBot<WithAsyncMethod_InstanceObject<WithAsyncMethod_TongsManageMove<WithAsyncMethod_TongsManageOpening<WithAsyncMethod_MoveCam<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_MoveBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveBot() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MoveBotRequest, ::MoveBotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MoveBotRequest* request, ::MoveBotResponse* response) { return this->MoveBot(context, request, response); }));}
    void SetMessageAllocatorFor_MoveBot(
        ::grpc::MessageAllocator< ::MoveBotRequest, ::MoveBotResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MoveBotRequest, ::MoveBotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveBot(::grpc::ServerContext* /*context*/, const ::MoveBotRequest* /*request*/, ::MoveBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveBot(
      ::grpc::CallbackServerContext* /*context*/, const ::MoveBotRequest* /*request*/, ::MoveBotResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RotaBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RotaBot() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::RotaBotRequest, ::RotaBotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RotaBotRequest* request, ::RotaBotResponse* response) { return this->RotaBot(context, request, response); }));}
    void SetMessageAllocatorFor_RotaBot(
        ::grpc::MessageAllocator< ::RotaBotRequest, ::RotaBotResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RotaBotRequest, ::RotaBotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RotaBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotaBot(::grpc::ServerContext* /*context*/, const ::RotaBotRequest* /*request*/, ::RotaBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RotaBot(
      ::grpc::CallbackServerContext* /*context*/, const ::RotaBotRequest* /*request*/, ::RotaBotResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InstanceObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InstanceObject() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::InstanceObjectRequest, ::InstanceObjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::InstanceObjectRequest* request, ::InstanceObjectResponse* response) { return this->InstanceObject(context, request, response); }));}
    void SetMessageAllocatorFor_InstanceObject(
        ::grpc::MessageAllocator< ::InstanceObjectRequest, ::InstanceObjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::InstanceObjectRequest, ::InstanceObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InstanceObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceObject(::grpc::ServerContext* /*context*/, const ::InstanceObjectRequest* /*request*/, ::InstanceObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstanceObject(
      ::grpc::CallbackServerContext* /*context*/, const ::InstanceObjectRequest* /*request*/, ::InstanceObjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TongsManageMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TongsManageMove() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TongsManageMoveRequest, ::TongsManageMoveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TongsManageMoveRequest* request, ::TongsManageMoveResponse* response) { return this->TongsManageMove(context, request, response); }));}
    void SetMessageAllocatorFor_TongsManageMove(
        ::grpc::MessageAllocator< ::TongsManageMoveRequest, ::TongsManageMoveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TongsManageMoveRequest, ::TongsManageMoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TongsManageMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageMove(::grpc::ServerContext* /*context*/, const ::TongsManageMoveRequest* /*request*/, ::TongsManageMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TongsManageMove(
      ::grpc::CallbackServerContext* /*context*/, const ::TongsManageMoveRequest* /*request*/, ::TongsManageMoveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TongsManageOpening : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TongsManageOpening() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::TongsManageOpeningRequest, ::TongsManageOpeningResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TongsManageOpeningRequest* request, ::TongsManageOpeningResponse* response) { return this->TongsManageOpening(context, request, response); }));}
    void SetMessageAllocatorFor_TongsManageOpening(
        ::grpc::MessageAllocator< ::TongsManageOpeningRequest, ::TongsManageOpeningResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TongsManageOpeningRequest, ::TongsManageOpeningResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TongsManageOpening() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageOpening(::grpc::ServerContext* /*context*/, const ::TongsManageOpeningRequest* /*request*/, ::TongsManageOpeningResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TongsManageOpening(
      ::grpc::CallbackServerContext* /*context*/, const ::TongsManageOpeningRequest* /*request*/, ::TongsManageOpeningResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveCam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveCam() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::MoveCamRequest, ::MoveCamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MoveCamRequest* request, ::MoveCamResponse* response) { return this->MoveCam(context, request, response); }));}
    void SetMessageAllocatorFor_MoveCam(
        ::grpc::MessageAllocator< ::MoveCamRequest, ::MoveCamResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MoveCamRequest, ::MoveCamResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveCam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCam(::grpc::ServerContext* /*context*/, const ::MoveCamRequest* /*request*/, ::MoveCamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveCam(
      ::grpc::CallbackServerContext* /*context*/, const ::MoveCamRequest* /*request*/, ::MoveCamResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_MoveBot<WithCallbackMethod_RotaBot<WithCallbackMethod_InstanceObject<WithCallbackMethod_TongsManageMove<WithCallbackMethod_TongsManageOpening<WithCallbackMethod_MoveCam<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_MoveBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveBot() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MoveBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveBot(::grpc::ServerContext* /*context*/, const ::MoveBotRequest* /*request*/, ::MoveBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RotaBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RotaBot() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RotaBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotaBot(::grpc::ServerContext* /*context*/, const ::RotaBotRequest* /*request*/, ::RotaBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstanceObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstanceObject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InstanceObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceObject(::grpc::ServerContext* /*context*/, const ::InstanceObjectRequest* /*request*/, ::InstanceObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TongsManageMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TongsManageMove() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TongsManageMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageMove(::grpc::ServerContext* /*context*/, const ::TongsManageMoveRequest* /*request*/, ::TongsManageMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TongsManageOpening : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TongsManageOpening() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TongsManageOpening() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageOpening(::grpc::ServerContext* /*context*/, const ::TongsManageOpeningRequest* /*request*/, ::TongsManageOpeningResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveCam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveCam() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_MoveCam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCam(::grpc::ServerContext* /*context*/, const ::MoveCamRequest* /*request*/, ::MoveCamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveBot() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_MoveBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveBot(::grpc::ServerContext* /*context*/, const ::MoveBotRequest* /*request*/, ::MoveBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveBot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RotaBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RotaBot() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RotaBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotaBot(::grpc::ServerContext* /*context*/, const ::RotaBotRequest* /*request*/, ::RotaBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotaBot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstanceObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstanceObject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InstanceObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceObject(::grpc::ServerContext* /*context*/, const ::InstanceObjectRequest* /*request*/, ::InstanceObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstanceObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TongsManageMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TongsManageMove() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TongsManageMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageMove(::grpc::ServerContext* /*context*/, const ::TongsManageMoveRequest* /*request*/, ::TongsManageMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTongsManageMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TongsManageOpening : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TongsManageOpening() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TongsManageOpening() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageOpening(::grpc::ServerContext* /*context*/, const ::TongsManageOpeningRequest* /*request*/, ::TongsManageOpeningResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTongsManageOpening(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveCam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveCam() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_MoveCam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCam(::grpc::ServerContext* /*context*/, const ::MoveCamRequest* /*request*/, ::MoveCamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveCam(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveBot() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveBot(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveBot(::grpc::ServerContext* /*context*/, const ::MoveBotRequest* /*request*/, ::MoveBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveBot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RotaBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RotaBot() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RotaBot(context, request, response); }));
    }
    ~WithRawCallbackMethod_RotaBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotaBot(::grpc::ServerContext* /*context*/, const ::RotaBotRequest* /*request*/, ::RotaBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RotaBot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InstanceObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InstanceObject() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstanceObject(context, request, response); }));
    }
    ~WithRawCallbackMethod_InstanceObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceObject(::grpc::ServerContext* /*context*/, const ::InstanceObjectRequest* /*request*/, ::InstanceObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstanceObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TongsManageMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TongsManageMove() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TongsManageMove(context, request, response); }));
    }
    ~WithRawCallbackMethod_TongsManageMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageMove(::grpc::ServerContext* /*context*/, const ::TongsManageMoveRequest* /*request*/, ::TongsManageMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TongsManageMove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TongsManageOpening : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TongsManageOpening() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TongsManageOpening(context, request, response); }));
    }
    ~WithRawCallbackMethod_TongsManageOpening() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TongsManageOpening(::grpc::ServerContext* /*context*/, const ::TongsManageOpeningRequest* /*request*/, ::TongsManageOpeningResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TongsManageOpening(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveCam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveCam() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveCam(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveCam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCam(::grpc::ServerContext* /*context*/, const ::MoveCamRequest* /*request*/, ::MoveCamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveCam(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveBot() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MoveBotRequest, ::MoveBotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MoveBotRequest, ::MoveBotResponse>* streamer) {
                       return this->StreamedMoveBot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveBot(::grpc::ServerContext* /*context*/, const ::MoveBotRequest* /*request*/, ::MoveBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveBot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MoveBotRequest,::MoveBotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RotaBot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RotaBot() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RotaBotRequest, ::RotaBotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RotaBotRequest, ::RotaBotResponse>* streamer) {
                       return this->StreamedRotaBot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RotaBot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RotaBot(::grpc::ServerContext* /*context*/, const ::RotaBotRequest* /*request*/, ::RotaBotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRotaBot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RotaBotRequest,::RotaBotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstanceObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstanceObject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InstanceObjectRequest, ::InstanceObjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::InstanceObjectRequest, ::InstanceObjectResponse>* streamer) {
                       return this->StreamedInstanceObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstanceObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstanceObject(::grpc::ServerContext* /*context*/, const ::InstanceObjectRequest* /*request*/, ::InstanceObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstanceObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InstanceObjectRequest,::InstanceObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TongsManageMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TongsManageMove() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TongsManageMoveRequest, ::TongsManageMoveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TongsManageMoveRequest, ::TongsManageMoveResponse>* streamer) {
                       return this->StreamedTongsManageMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TongsManageMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TongsManageMove(::grpc::ServerContext* /*context*/, const ::TongsManageMoveRequest* /*request*/, ::TongsManageMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTongsManageMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TongsManageMoveRequest,::TongsManageMoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TongsManageOpening : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TongsManageOpening() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TongsManageOpeningRequest, ::TongsManageOpeningResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TongsManageOpeningRequest, ::TongsManageOpeningResponse>* streamer) {
                       return this->StreamedTongsManageOpening(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TongsManageOpening() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TongsManageOpening(::grpc::ServerContext* /*context*/, const ::TongsManageOpeningRequest* /*request*/, ::TongsManageOpeningResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTongsManageOpening(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TongsManageOpeningRequest,::TongsManageOpeningResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveCam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveCam() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MoveCamRequest, ::MoveCamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MoveCamRequest, ::MoveCamResponse>* streamer) {
                       return this->StreamedMoveCam(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveCam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveCam(::grpc::ServerContext* /*context*/, const ::MoveCamRequest* /*request*/, ::MoveCamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveCam(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MoveCamRequest,::MoveCamResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MoveBot<WithStreamedUnaryMethod_RotaBot<WithStreamedUnaryMethod_InstanceObject<WithStreamedUnaryMethod_TongsManageMove<WithStreamedUnaryMethod_TongsManageOpening<WithStreamedUnaryMethod_MoveCam<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_MoveBot<WithStreamedUnaryMethod_RotaBot<WithStreamedUnaryMethod_InstanceObject<WithStreamedUnaryMethod_TongsManageMove<WithStreamedUnaryMethod_TongsManageOpening<WithStreamedUnaryMethod_MoveCam<Service > > > > > > StreamedService;
};


#endif  // GRPC_com_2eproto__INCLUDED
